@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using Microsoft.Extensions.Logging;
@using Microsoft.Extensions.Logging.Abstractions;

<div class=@(@class) id="@Model.Id"></div>

@functions {
    [Parameter]
    public MonacoEditor Ref
    {
        get => this._ref;
        set => _ref = value;
    }

    [Inject]
    public Microsoft.Extensions.Logging.ILogger<MonacoEditor> Logger { get; set; }

    [Inject]
    IJSRuntime runtime { get; set; }

    [Parameter]
    public EditorModel Model { get; set; }

    [Parameter]
    public string @class { get; set; }

    [Parameter]
    public double Height
    {
        get => Model.LayoutInfo.Height;
        set
        {
            Model.LayoutInfo.Height = value;
        }
    }

    [Parameter]
    public double Width
    {
        get => Model.LayoutInfo.Width;
        set
        {
            Model.LayoutInfo.Width = value;
        }
    }

    private bool _alreadyRendered = false;
    private MonacoEditor _ref;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_alreadyRendered)
        {
            try
            {
                _alreadyRendered = await BlazacoJSInterop.InitializeEditor(runtime, Model);
            }
            catch (Exception ex)
            {
                Logger.LogError("Error initializing MonacoEditor JavaScript.", ex);
            }
        }

        await Layout();
    }

    public async Task<string> GetValue()
    {
        return await BlazacoJSInterop.GetValue(runtime, Model.Id);
    }

    public async Task<bool> SetValue(string newValue)
    {
        return await BlazacoJSInterop.SetValue(runtime, Model.Id, newValue);
    }

    public async Task<bool> SetTheme(string newTheme)
    {
        return await BlazacoJSInterop.SetTheme(runtime, Model.Id, newTheme);
    }

    public async Task<bool> Layout()
    {
        try
        {
            return await BlazacoJSInterop.Layout(runtime, Model.Id, Model.LayoutInfo);
        }
        catch(Exception ex)
        {
            Logger.LogError("Error in JavaScript calling Layout.", ex);
            return false;
        }
    }
}